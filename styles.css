/* Step 18
The text is centered again so the link to the CSS file is working. Add another style to the file that changes the background-color property to brown for the body element. */
body {
  /* Step 19
  That brown background makes it hard to read the text. Change the body element's background color to be burlywood so it has some color but you are still be able to read the text. */
  /* Step 22
Comments in CSS look like this:

/* comment here 
In your style sheet, comment out the line containing the background-color property and value, so you can see the effect of only styling div element. This will make the background white again. */
  /* background-color: burlywood; */
  /* Step 28
Since the cafe's main product for sale is coffee, you could use an image of coffee beans for the background of the page.

Delete the comment and its contents inside the body type selector. Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg). */
  background: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);

}

/* Step 14
You have styled three elements by writing CSS inside the style tags. This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.

We have created a separate styles.css file for you and switched the editor view to that file. You can change between files with the tabs at the top of the editor.

Start by rewriting the styles you have created into the styles.css file. Make sure to exclude the opening and closing style tags. */
/* Step 21
The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this. Create a new type selector in the style sheet that gives your div element a width of 300px. */
/* Step 26
So far you have been using type selectors to style elements. A class selector is defined by a name with a dot directly in front of it, like this:

.class-name {
  styles
}
Change the existing div selector into a class selector by replacing div with a class named menu. */
.menu {
  /* Step 24
Now it's easy to see that the text is centered inside the div element. Currently, the width of the div element is specified in pixels (px). Change the width property's value to be 80%, to make it 80% the width of its parent element (body). */
  width: 80%;
  /* Step 23
Now use the existing div selector to set the background color of the div element to be burlywood. */
  background-color: burlywood;
  /* Step 25
Next, you want to center the div horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the div element within the body element. */
  margin-left: auto;
  margin-right: auto;
}

h1,
h2,
p {
  text-align: center;
}

/* Step 33
Using your new flavor class as a selector, set the text-align property's value to left. */
/* 
Step 38
That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each. */

/* Step 39
Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%.

Change the width value to 49% for each class to see what happens. */

/* Step 41
Now go ahead and change both the flavor and price class' widths to be 50% again. */

.flavor {
  text-align: left;
  width:50%;
}

/* Step 35
Now align the text to the right for the elements with the price class. */

.price {
  text-align: right;
  width:50%;
}

/* Step 37
The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this:

.item p { }
Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements. */

.item p {
  display:  inline-block;
}